#!/usr/bin/php
<?php

use Strukt\Env;
use Strukt\Http\Request;
use Strukt\Core\Registry;
use Strukt\Console;
use Strukt\Router\Kernel as RouterKernel;
use Strukt\Router\Middleware\Router as RouterMiddleware;
use Strukt\Framework\Provider\Router as RouterProvider;
use Strukt\Framework\Provider\Annotation as AnnotationProvider;
use App\Loader as AppLoader;

/** //strukt-do
use App\Provider\EntityManager as EntityManagerProvider;
use App\Provider\EntityManagerAdapter as EntityManagerAdapterProvider;
use App\Provider\Normalizer as NormalizerProvider;
use App\Provider\Logger as LoggerProvider;
use App\Command\Doctrine\GenerateModels as GenerateModelsCommand;
use App\Command\Doctrine\Migration\GenerateMigration as GenerateMigrationCommand;
use App\Command\Doctrine\Seeder\GenerateSeeder as GenerateSeederCommand;
use App\Command\Doctrine\Migration\MigrateExec as MigrateExecCommand;
use App\Command\Doctrine\Seeder\SeederExec as SeederExecCommand;
use App\Command\Doctrine\SqlExec as SqlExecCommand;
use Cobaia\Doctrine\MonologSQLLogger;
**/ //strukt-do

/** //strukt-roles
use __APP__\AuthModule\Command\PermissionAdd as PermissionAddCommand;
use __APP__\AuthModule\Command\RoleAdd as RoleAddCommand;
use __APP__\AuthModule\Command\RoleAddPermission as RoleAddPermissionCommand;
use __APP__\AuthModule\Command\UserAdd as UserAddCommand;
use __APP__\AuthModule\Command\UserDumpCredentials as UserDumpCredentialsCommand;
use __APP__\AuthModule\Command\UserResetPassword as UserResetPasswordCommand;
**/ //strukt-roles

/** //strukt-books
use __APP__\AccountsModule\Command\BooksShell as BooksShellCommand;
**/ //strukt-books

require "bootstrap.php";

Env::set("root_dir", getcwd());
Env::set("rel_appsrc_dir", "app/src/");
Env::set("rel_app_ini", "cfg/app.ini");
Env::set("rel_mod_ini", "cfg/module.ini");
Env::set("rel_tplapp_dir", "tpl/sgf/app/");
Env::set("rel_tplappsrc_dir", "tpl/sgf/app/src/");
Env::set("rel_tplauthmod_dir","tpl/sgf/app/src/App/AuthModule/");
Env::set("rel_app_lib", "lib/App");
Env::set("rel_loader_sgf","tpl/sgf/lib/App/Loader.sgf");

/** //strukt-do
Env::set("is_dev", true);
Env::set("root_dir", getcwd());
Env::set("rel_db_ini", "cfg/db.ini");
Env::set("migration_sgf","tpl/sgf/database/schema/Schema/Migration/Version_.sgf");
Env::set("migration_home","database/schema/Schema/Migration");
Env::set("migration_ns", Schema\Migration::class);
Env::set("entity_ns", App\Contract\Entity::class);
Env::set("seeder_sgf", "tpl/sgf/database/seeder/Seed/NameVer.sgf");
Env::set("seeder_dir", "database/seeder/Seed");
Env::set("seeder_home", "database/seeder");
Env::set("logger_name", "Console Logger");
Env::set("logger_file", "logs/console.log");
**/ //strukt-do

$kernel = new RouterKernel(Request::createFromGlobals());
/** //strukt-do
$kernel->inject("app.dep.logger.sqllogger", function(){

	return new MonologSQLLogger(null, null, __DIR__ . '/logs/');
});
**/ //strukt-do
$kernel->providers(array(

	/** //strukt-do
	LoggerProvider::class,
	EntityManagerProvider::class,
	EntityManagerAdapterProvider::class,
	NormalizerProvider::class
	**/ //strukt-do
	RouterProvider::class,
	AnnotationProvider::class
));

$kernel->middlewares(array(
	
	"router" => new RouterMiddleware,
));

try{
	
	if(!class_exists(AppLoader::class))
		throw new Exception(sprintf("%s does not exixst!", AppLoader::class));
	
	$loader = new AppLoader($kernel);
	$app = $loader->getApp();

	$moduleList = $app->getModuleList();

	$app->initialize();	
}
catch(\Exception $e){

	$moduleList = null;
}

/**/ //strukt-strukt
$configs = array(

	"labelStruktSect"=>true, 
	"moduleList"=>$moduleList,
);
/**/ //strukt-strukt

/** //strukt-do
$configs = array(

	"labelStruktSect"=>true, 
	// "loadNativeCmds"=>true,
	"appName"=>"Strukt Console",
	"moduleList"=>$moduleList,
	"appDir"=>"app",
	"rootDir"=>__DIR__
);
**/ //strukt-do

$console = new Console($configs);

/** //strukt-do
$console->addCmdSect("\nDoctrine");
$console->add(new GenerateModelsCommand());
$console->add(new GenerateMigrationCommand());
$console->add(new GenerateSeederCommand());
$console->add(new MigrateExecCommand());
$console->add(new SeederExecCommand());
$console->add(new SqlExecCommand());
**/ //strukt-do

/** //strukt-auth
$console->addCmdSect("\nAuth");
$console->add(new PermissionAddCommand());
$console->add(new RoleAddCommand());
$console->add(new RoleAddPermissionCommand());
$console->add(new UserAddCommand());
$console->add(new UserDumpCredentialsCommand());
$console->add(new UserResetPasswordCommand());
**/ //strukt-auth

/** //strukt-books
$console->addCmdSect("\nAcounts");
$console->add(new BooksShellCommand);
**/ //strukt-books

exit($console->run($_SERVER["argv"]));