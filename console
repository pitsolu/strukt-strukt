#!/usr/bin/php
<?php

use Strukt\Env;
use Strukt\Http\Request;
use Strukt\Core\Registry;
use Strukt\Console;
use Strukt\Router\Kernel as RouterKernel;
use Strukt\Router\Middleware\Router as RouterMiddleware;
use Strukt\Framework\Provider\Router as RouterProvider;
use Strukt\Framework\Provider\Annotation as AnnotationProvider;
use App\Loader as AppLoader;

require "bootstrap.php";

Env::set("root_dir", getcwd());
Env::set("rel_appsrc_dir", "app/src/");
Env::set("rel_app_ini", "cfg/app.ini");
Env::set("rel_mod_ini", "cfg/module.ini");
Env::set("rel_tplapp_dir", "tpl/sgf/app/");
Env::set("rel_tplappsrc_dir", "tpl/sgf/app/src/");
Env::set("rel_tplauthmod_dir","tpl/sgf/app/src/App/AuthModule/");
Env::set("rel_app_lib", "lib/App");
Env::set("rel_loader_sgf","tpl/sgf/lib/App/Loader.sgf");

$kernel = new RouterKernel(Request::createFromGlobals());
$kernel->providers(array(

	RouterProvider::class,
	AnnotationProvider::class
));

$kernel->middlewares(array(
	
	"router" => new RouterMiddleware,
));

try{
	
	if(!class_exists(AppLoader::class))
		throw new Exception(sprintf("%s does not exixst!", AppLoader::class));
	
	$loader = new AppLoader($kernel);
	$app = $loader->getApp();

	$moduleList = $app->getModuleList();

	$app->initialize();	
}
catch(\Exception $e){

	$moduleList = null;
}

$console = new Console(array(

	"labelStruktSect"=>true, 
	// "loadNativeCmd"=>false,
	// "appName"=>"Strukt Console",
	"moduleList"=>$moduleList,
	// "appDir"=>"app",
	// "rootDir"=>__DIR__
));

exit($console->run($_SERVER["argv"]));